// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: std_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_std_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_std_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_std_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_std_5fmsgs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_std_5fmsgs_2eproto;
namespace std_msgs {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Path2f;
struct Path2fDefaultTypeInternal;
extern Path2fDefaultTypeInternal _Path2f_default_instance_;
class Polygon2f;
struct Polygon2fDefaultTypeInternal;
extern Polygon2fDefaultTypeInternal _Polygon2f_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Quaternionf;
struct QuaternionfDefaultTypeInternal;
extern QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
class Vector2f;
struct Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
class Vector2i;
struct Vector2iDefaultTypeInternal;
extern Vector2iDefaultTypeInternal _Vector2i_default_instance_;
class Vector3f;
struct Vector3fDefaultTypeInternal;
extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
class Vector3i;
struct Vector3iDefaultTypeInternal;
extern Vector3iDefaultTypeInternal _Vector3i_default_instance_;
class Vector4f;
struct Vector4fDefaultTypeInternal;
extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
}  // namespace std_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::std_msgs::Header* Arena::CreateMaybeMessage<::std_msgs::Header>(Arena*);
template<> ::std_msgs::Path2f* Arena::CreateMaybeMessage<::std_msgs::Path2f>(Arena*);
template<> ::std_msgs::Polygon2f* Arena::CreateMaybeMessage<::std_msgs::Polygon2f>(Arena*);
template<> ::std_msgs::Pose* Arena::CreateMaybeMessage<::std_msgs::Pose>(Arena*);
template<> ::std_msgs::Quaternionf* Arena::CreateMaybeMessage<::std_msgs::Quaternionf>(Arena*);
template<> ::std_msgs::Vector2f* Arena::CreateMaybeMessage<::std_msgs::Vector2f>(Arena*);
template<> ::std_msgs::Vector2i* Arena::CreateMaybeMessage<::std_msgs::Vector2i>(Arena*);
template<> ::std_msgs::Vector3f* Arena::CreateMaybeMessage<::std_msgs::Vector3f>(Arena*);
template<> ::std_msgs::Vector3i* Arena::CreateMaybeMessage<::std_msgs::Vector3i>(Arena*);
template<> ::std_msgs::Vector4f* Arena::CreateMaybeMessage<::std_msgs::Vector4f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace std_msgs {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 3,
    kTimeStampFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // string frameId = 3;
  void clear_frameid();
  const std::string& frameid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frameid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frameid();
  PROTOBUF_NODISCARD std::string* release_frameid();
  void set_allocated_frameid(std::string* frameid);
  private:
  const std::string& _internal_frameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frameid(const std::string& value);
  std::string* _internal_mutable_frameid();
  public:

  // double timeStamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // uint32 seq = 2;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frameid_;
    double timestamp_;
    uint32_t seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector3f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Vector3f) */ {
 public:
  inline Vector3f() : Vector3f(nullptr) {}
  ~Vector3f() override;
  explicit PROTOBUF_CONSTEXPR Vector3f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3f(const Vector3f& from);
  Vector3f(Vector3f&& from) noexcept
    : Vector3f() {
    *this = ::std::move(from);
  }

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3f& operator=(Vector3f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3f* internal_default_instance() {
    return reinterpret_cast<const Vector3f*>(
               &_Vector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3f& a, Vector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3f& from) {
    Vector3f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Vector3f";
  }
  protected:
  explicit Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Vector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {}
  ~Vector2f() override;
  explicit PROTOBUF_CONSTEXPR Vector2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2f& from) {
    Vector2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Vector2f";
  }
  protected:
  explicit Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Vector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector2i final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Vector2i) */ {
 public:
  inline Vector2i() : Vector2i(nullptr) {}
  ~Vector2i() override;
  explicit PROTOBUF_CONSTEXPR Vector2i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2i(const Vector2i& from);
  Vector2i(Vector2i&& from) noexcept
    : Vector2i() {
    *this = ::std::move(from);
  }

  inline Vector2i& operator=(const Vector2i& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2i& operator=(Vector2i&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2i& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2i* internal_default_instance() {
    return reinterpret_cast<const Vector2i*>(
               &_Vector2i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector2i& a, Vector2i& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2i* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2i>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2i& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2i& from) {
    Vector2i::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2i* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Vector2i";
  }
  protected:
  explicit Vector2i(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Vector2i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector3i final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Vector3i) */ {
 public:
  inline Vector3i() : Vector3i(nullptr) {}
  ~Vector3i() override;
  explicit PROTOBUF_CONSTEXPR Vector3i(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3i(const Vector3i& from);
  Vector3i(Vector3i&& from) noexcept
    : Vector3i() {
    *this = ::std::move(from);
  }

  inline Vector3i& operator=(const Vector3i& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3i& operator=(Vector3i&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3i& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3i* internal_default_instance() {
    return reinterpret_cast<const Vector3i*>(
               &_Vector3i_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vector3i& a, Vector3i& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3i* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3i* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3i* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3i>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3i& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3i& from) {
    Vector3i::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3i* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Vector3i";
  }
  protected:
  explicit Vector3i(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Vector3i)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Vector4f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Vector4f) */ {
 public:
  inline Vector4f() : Vector4f(nullptr) {}
  ~Vector4f() override;
  explicit PROTOBUF_CONSTEXPR Vector4f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector4f(const Vector4f& from);
  Vector4f(Vector4f&& from) noexcept
    : Vector4f() {
    *this = ::std::move(from);
  }

  inline Vector4f& operator=(const Vector4f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4f& operator=(Vector4f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector4f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector4f* internal_default_instance() {
    return reinterpret_cast<const Vector4f*>(
               &_Vector4f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vector4f& a, Vector4f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector4f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector4f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector4f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector4f& from) {
    Vector4f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Vector4f";
  }
  protected:
  explicit Vector4f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIntensityFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float intensity = 4;
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Vector4f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float intensity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() override;
  explicit PROTOBUF_CONSTEXPR Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pose& from) {
    Pose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Quaternionf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Quaternionf) */ {
 public:
  inline Quaternionf() : Quaternionf(nullptr) {}
  ~Quaternionf() override;
  explicit PROTOBUF_CONSTEXPR Quaternionf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternionf(const Quaternionf& from);
  Quaternionf(Quaternionf&& from) noexcept
    : Quaternionf() {
    *this = ::std::move(from);
  }

  inline Quaternionf& operator=(const Quaternionf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternionf& operator=(Quaternionf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternionf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternionf* internal_default_instance() {
    return reinterpret_cast<const Quaternionf*>(
               &_Quaternionf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Quaternionf& a, Quaternionf& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternionf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternionf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternionf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternionf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternionf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternionf& from) {
    Quaternionf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternionf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Quaternionf";
  }
  protected:
  explicit Quaternionf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:std_msgs.Quaternionf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Polygon2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Polygon2f) */ {
 public:
  inline Polygon2f() : Polygon2f(nullptr) {}
  ~Polygon2f() override;
  explicit PROTOBUF_CONSTEXPR Polygon2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon2f(const Polygon2f& from);
  Polygon2f(Polygon2f&& from) noexcept
    : Polygon2f() {
    *this = ::std::move(from);
  }

  inline Polygon2f& operator=(const Polygon2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon2f& operator=(Polygon2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon2f* internal_default_instance() {
    return reinterpret_cast<const Polygon2f*>(
               &_Polygon2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Polygon2f& a, Polygon2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Polygon2f& from) {
    Polygon2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Polygon2f";
  }
  protected:
  explicit Polygon2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .std_msgs.Vector2f points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::std_msgs::Vector2f* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >*
      mutable_points();
  private:
  const ::std_msgs::Vector2f& _internal_points(int index) const;
  ::std_msgs::Vector2f* _internal_add_points();
  public:
  const ::std_msgs::Vector2f& points(int index) const;
  ::std_msgs::Vector2f* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >&
      points() const;

  // @@protoc_insertion_point(class_scope:std_msgs.Polygon2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Path2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:std_msgs.Path2f) */ {
 public:
  inline Path2f() : Path2f(nullptr) {}
  ~Path2f() override;
  explicit PROTOBUF_CONSTEXPR Path2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path2f(const Path2f& from);
  Path2f(Path2f&& from) noexcept
    : Path2f() {
    *this = ::std::move(from);
  }

  inline Path2f& operator=(const Path2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path2f& operator=(Path2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path2f* internal_default_instance() {
    return reinterpret_cast<const Path2f*>(
               &_Path2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Path2f& a, Path2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Path2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Path2f& from) {
    Path2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "std_msgs.Path2f";
  }
  protected:
  explicit Path2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .std_msgs.Vector2f points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::std_msgs::Vector2f* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >*
      mutable_points();
  private:
  const ::std_msgs::Vector2f& _internal_points(int index) const;
  ::std_msgs::Vector2f* _internal_add_points();
  public:
  const ::std_msgs::Vector2f& points(int index) const;
  ::std_msgs::Vector2f* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >&
      points() const;

  // @@protoc_insertion_point(class_scope:std_msgs.Path2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f > points_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_std_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// double timeStamp = 1;
inline void Header::clear_timestamp() {
  _impl_.timestamp_ = 0;
}
inline double Header::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double Header::timestamp() const {
  // @@protoc_insertion_point(field_get:std_msgs.Header.timeStamp)
  return _internal_timestamp();
}
inline void Header::_internal_set_timestamp(double value) {
  
  _impl_.timestamp_ = value;
}
inline void Header::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:std_msgs.Header.timeStamp)
}

// uint32 seq = 2;
inline void Header::clear_seq() {
  _impl_.seq_ = 0u;
}
inline uint32_t Header::_internal_seq() const {
  return _impl_.seq_;
}
inline uint32_t Header::seq() const {
  // @@protoc_insertion_point(field_get:std_msgs.Header.seq)
  return _internal_seq();
}
inline void Header::_internal_set_seq(uint32_t value) {
  
  _impl_.seq_ = value;
}
inline void Header::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:std_msgs.Header.seq)
}

// string frameId = 3;
inline void Header::clear_frameid() {
  _impl_.frameid_.ClearToEmpty();
}
inline const std::string& Header::frameid() const {
  // @@protoc_insertion_point(field_get:std_msgs.Header.frameId)
  return _internal_frameid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_frameid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frameid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:std_msgs.Header.frameId)
}
inline std::string* Header::mutable_frameid() {
  std::string* _s = _internal_mutable_frameid();
  // @@protoc_insertion_point(field_mutable:std_msgs.Header.frameId)
  return _s;
}
inline const std::string& Header::_internal_frameid() const {
  return _impl_.frameid_.Get();
}
inline void Header::_internal_set_frameid(const std::string& value) {
  
  _impl_.frameid_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_frameid() {
  
  return _impl_.frameid_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_frameid() {
  // @@protoc_insertion_point(field_release:std_msgs.Header.frameId)
  return _impl_.frameid_.Release();
}
inline void Header::set_allocated_frameid(std::string* frameid) {
  if (frameid != nullptr) {
    
  } else {
    
  }
  _impl_.frameid_.SetAllocated(frameid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frameid_.IsDefault()) {
    _impl_.frameid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:std_msgs.Header.frameId)
}

// -------------------------------------------------------------------

// Vector3f

// float x = 1;
inline void Vector3f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3f::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector3f.x)
  return _internal_x();
}
inline void Vector3f::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector3f.x)
}

// float y = 2;
inline void Vector3f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3f::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector3f.y)
  return _internal_y();
}
inline void Vector3f::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector3f.y)
}

// float z = 3;
inline void Vector3f::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3f::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector3f.z)
  return _internal_z();
}
inline void Vector3f::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector3f.z)
}

// -------------------------------------------------------------------

// Vector2f

// float x = 1;
inline void Vector2f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector2f::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector2f.x)
  return _internal_x();
}
inline void Vector2f::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector2f.x)
}

// float y = 2;
inline void Vector2f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector2f::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector2f.y)
  return _internal_y();
}
inline void Vector2f::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector2f.y)
}

// -------------------------------------------------------------------

// Vector2i

// int32 x = 1;
inline void Vector2i::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Vector2i::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Vector2i::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector2i.x)
  return _internal_x();
}
inline void Vector2i::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Vector2i::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector2i.x)
}

// int32 y = 2;
inline void Vector2i::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Vector2i::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Vector2i::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector2i.y)
  return _internal_y();
}
inline void Vector2i::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Vector2i::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector2i.y)
}

// -------------------------------------------------------------------

// Vector3i

// int32 x = 1;
inline void Vector3i::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Vector3i::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Vector3i::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector3i.x)
  return _internal_x();
}
inline void Vector3i::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Vector3i::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector3i.x)
}

// int32 y = 2;
inline void Vector3i::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Vector3i::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Vector3i::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector3i.y)
  return _internal_y();
}
inline void Vector3i::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Vector3i::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector3i.y)
}

// int32 z = 3;
inline void Vector3i::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t Vector3i::_internal_z() const {
  return _impl_.z_;
}
inline int32_t Vector3i::z() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector3i.z)
  return _internal_z();
}
inline void Vector3i::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void Vector3i::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector3i.z)
}

// -------------------------------------------------------------------

// Vector4f

// float x = 1;
inline void Vector4f::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector4f::_internal_x() const {
  return _impl_.x_;
}
inline float Vector4f::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector4f.x)
  return _internal_x();
}
inline void Vector4f::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector4f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector4f.x)
}

// float y = 2;
inline void Vector4f::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector4f::_internal_y() const {
  return _impl_.y_;
}
inline float Vector4f::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector4f.y)
  return _internal_y();
}
inline void Vector4f::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector4f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector4f.y)
}

// float z = 3;
inline void Vector4f::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector4f::_internal_z() const {
  return _impl_.z_;
}
inline float Vector4f::z() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector4f.z)
  return _internal_z();
}
inline void Vector4f::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector4f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector4f.z)
}

// float intensity = 4;
inline void Vector4f::clear_intensity() {
  _impl_.intensity_ = 0;
}
inline float Vector4f::_internal_intensity() const {
  return _impl_.intensity_;
}
inline float Vector4f::intensity() const {
  // @@protoc_insertion_point(field_get:std_msgs.Vector4f.intensity)
  return _internal_intensity();
}
inline void Vector4f::_internal_set_intensity(float value) {
  
  _impl_.intensity_ = value;
}
inline void Vector4f::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:std_msgs.Vector4f.intensity)
}

// -------------------------------------------------------------------

// Pose

// float x = 1;
inline void Pose::clear_x() {
  _impl_.x_ = 0;
}
inline float Pose::_internal_x() const {
  return _impl_.x_;
}
inline float Pose::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Pose.x)
  return _internal_x();
}
inline void Pose::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Pose::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Pose.x)
}

// float y = 2;
inline void Pose::clear_y() {
  _impl_.y_ = 0;
}
inline float Pose::_internal_y() const {
  return _impl_.y_;
}
inline float Pose::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Pose.y)
  return _internal_y();
}
inline void Pose::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Pose::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Pose.y)
}

// float yaw = 3;
inline void Pose::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Pose::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Pose::yaw() const {
  // @@protoc_insertion_point(field_get:std_msgs.Pose.yaw)
  return _internal_yaw();
}
inline void Pose::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Pose::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:std_msgs.Pose.yaw)
}

// -------------------------------------------------------------------

// Quaternionf

// float w = 1;
inline void Quaternionf::clear_w() {
  _impl_.w_ = 0;
}
inline float Quaternionf::_internal_w() const {
  return _impl_.w_;
}
inline float Quaternionf::w() const {
  // @@protoc_insertion_point(field_get:std_msgs.Quaternionf.w)
  return _internal_w();
}
inline void Quaternionf::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Quaternionf::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:std_msgs.Quaternionf.w)
}

// float x = 2;
inline void Quaternionf::clear_x() {
  _impl_.x_ = 0;
}
inline float Quaternionf::_internal_x() const {
  return _impl_.x_;
}
inline float Quaternionf::x() const {
  // @@protoc_insertion_point(field_get:std_msgs.Quaternionf.x)
  return _internal_x();
}
inline void Quaternionf::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Quaternionf::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:std_msgs.Quaternionf.x)
}

// float y = 3;
inline void Quaternionf::clear_y() {
  _impl_.y_ = 0;
}
inline float Quaternionf::_internal_y() const {
  return _impl_.y_;
}
inline float Quaternionf::y() const {
  // @@protoc_insertion_point(field_get:std_msgs.Quaternionf.y)
  return _internal_y();
}
inline void Quaternionf::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Quaternionf::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:std_msgs.Quaternionf.y)
}

// float z = 4;
inline void Quaternionf::clear_z() {
  _impl_.z_ = 0;
}
inline float Quaternionf::_internal_z() const {
  return _impl_.z_;
}
inline float Quaternionf::z() const {
  // @@protoc_insertion_point(field_get:std_msgs.Quaternionf.z)
  return _internal_z();
}
inline void Quaternionf::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Quaternionf::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:std_msgs.Quaternionf.z)
}

// -------------------------------------------------------------------

// Polygon2f

// repeated .std_msgs.Vector2f points = 1;
inline int Polygon2f::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int Polygon2f::points_size() const {
  return _internal_points_size();
}
inline void Polygon2f::clear_points() {
  _impl_.points_.Clear();
}
inline ::std_msgs::Vector2f* Polygon2f::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:std_msgs.Polygon2f.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >*
Polygon2f::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:std_msgs.Polygon2f.points)
  return &_impl_.points_;
}
inline const ::std_msgs::Vector2f& Polygon2f::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::std_msgs::Vector2f& Polygon2f::points(int index) const {
  // @@protoc_insertion_point(field_get:std_msgs.Polygon2f.points)
  return _internal_points(index);
}
inline ::std_msgs::Vector2f* Polygon2f::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::std_msgs::Vector2f* Polygon2f::add_points() {
  ::std_msgs::Vector2f* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:std_msgs.Polygon2f.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >&
Polygon2f::points() const {
  // @@protoc_insertion_point(field_list:std_msgs.Polygon2f.points)
  return _impl_.points_;
}

// -------------------------------------------------------------------

// Path2f

// repeated .std_msgs.Vector2f points = 1;
inline int Path2f::_internal_points_size() const {
  return _impl_.points_.size();
}
inline int Path2f::points_size() const {
  return _internal_points_size();
}
inline void Path2f::clear_points() {
  _impl_.points_.Clear();
}
inline ::std_msgs::Vector2f* Path2f::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:std_msgs.Path2f.points)
  return _impl_.points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >*
Path2f::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:std_msgs.Path2f.points)
  return &_impl_.points_;
}
inline const ::std_msgs::Vector2f& Path2f::_internal_points(int index) const {
  return _impl_.points_.Get(index);
}
inline const ::std_msgs::Vector2f& Path2f::points(int index) const {
  // @@protoc_insertion_point(field_get:std_msgs.Path2f.points)
  return _internal_points(index);
}
inline ::std_msgs::Vector2f* Path2f::_internal_add_points() {
  return _impl_.points_.Add();
}
inline ::std_msgs::Vector2f* Path2f::add_points() {
  ::std_msgs::Vector2f* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:std_msgs.Path2f.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::std_msgs::Vector2f >&
Path2f::points() const {
  // @@protoc_insertion_point(field_list:std_msgs.Path2f.points)
  return _impl_.points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace std_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_std_5fmsgs_2eproto
